{"name":"OAuth2","tagline":"Simple OAuth 2.0 framework in Swift","body":"Tiny little library to perform OAuth 2.0 flows from Swift.\r\n\r\n## Features\r\n\r\n- Support for `authorization_code` three-legged OAuth 2.0 flows\r\n\r\n    - Uses `WKWebView` when displaying a web-browser for the user to log in with\r\n\r\n    - Does not require registering custom URL schemes to handle the redirection by\r\n      the server, instead intercepts it directly on the `WKWebView`.\r\n\r\n    - If the default `WKWebView` implementation is not satisfactory, allows complete\r\n      customization of how the user is logged in to the authorization service:\r\n      Just pass through the `createWebViewController:` parameter to\r\n      `OAuth2.authorize()`, and have it return an adopter of the\r\n      `WebViewControllerType` protocol.\r\n\r\n- Support for `client_credential` two-legged OAuth 2.0 flows\r\n\r\n- Support for `refresh_token` two-legged OAuth 2.0 flows\r\n\r\nI have tested the library with Google, Facebook and SoundCloud logins. \r\n\r\n*NOTE:* Since Twitter uses the more complex OAuth 1.0, you will need a different\r\nlibrary if you want to support Twitter's flavour of OAuth.\r\n\r\n## Usage\r\n\r\nYou will need the OAuth authorization URL and token URL for the service you are\r\ntrying to connect to. \r\n\r\nYou will also need the client ID and client secret for your application,\r\nusually found in the developer portal of the service.  Google and Facebook call\r\nthem _app ID_ and _app secret_, other providers may use different terminology.\r\n\r\nLastly, if you use the `authorization_code` OAuth 2.0 flow (the one that\r\nrequires a user to log in to the service with a web browser, and grant your\r\napplication permission), you will need a redirection URL.\r\n\r\nThis URL should not actually exist for a non-web application, so feel free to\r\nuse something like `https://localhost/oauth`. It's a URL the authorization\r\nservice will attempt redirect to, in order to provide information which will be\r\nused to issue an access token.\r\n\r\nThis library will intercept the redirect and handle everything for you so you\r\njust get back a nice packaged up Swift object that tells you whether\r\nauthentication succeeded or failed.\r\n\r\nEnough talk, how about an example?\r\n\r\n## Example\r\n\r\nThis is an `authorization_code` example.\r\n\r\n```swift\r\n    let request = AuthorizationCodeRequest(\r\n        authorizationURL: \"https://endpoint.com/auth\"\r\n        tokenURL: \"https://endpoint.com/token\",\r\n        clientId: \"YOUR-CLIENT-ID\",\r\n        clientSecret: \"YOUR-SECRET\",\r\n        redirectURL: \"https://localhost/oauth\")!\r\n    OAuth2.authorize(request) { response in\r\n        switch response {\r\n        case .Success(let data):\r\n            let token = data.accessToken\r\n            // Do something with token, like call an API\r\n            if let refreshToken = data.refreshToken {\r\n                // Save refresh token if provided, `OAuth2.refresh()` can be used\r\n                // to avoid a re-authenticate if the access token expires.\r\n            }\r\n            break\r\n        case .Failure(let error):\r\n            // Authorization failed, `error` is an ErrorType. It may be an `AuthorizationFailure`,\r\n            // in which case you can see exactly which known OAuth error occurred, programmatically.\r\n            // It may also be an `NSError`, if the `NSURLSession` data task failed.\r\n            break\r\n        }\r\n    }\r\n```\r\n\r\nAs you can see, the library uses a `request:completion:` style, never blocking\r\nthe caller. The completion block you supply may be called on a background\r\nqueue, so you should send any work touching UIKit to the main queue using\r\nsomething like `dispatch_async(dispatch_get_main_queue()) {}`.\r\n\r\n\r\n## More Information\r\n\r\nA sample application is included in `OAuth2Example`, ready for you to test\r\nGoogle, Facebook and SoundCloud authentication. Just fill in the IDs and\r\nsecrets for your registered application first.\r\n\r\n## License\r\nApache 2.0","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}